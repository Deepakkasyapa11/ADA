class Graph():
   INF = 999999
   def __init__(self, vertices):
       self.V = vertices
       self.graph = [[0 for column in range(vertices)] for row in range(vertices)]
   def printMST(self, pi):
       print("Edge     Weight")
       for i in range(1, self.V):
           print(f"{pi[i]} - {i}       {self.graph[i][pi[i]]}")
   def minKey(self, key, mstSet):
       min = self.INF
       for v in range(self.V):
           if key[v] < min and mstSet[v] == False:
               min = key[v]
               min_index = v
       return min_index
   def prims(self):
       key = [self.INF for _ in range(self.V)]
       pi = [None for _ in range(self.V)]
       key[0] = 0
       mstSet = [False for _ in range(self.V)]
       pi[0] = -1
 
       for _ in range(self.V):
           u = self.minKey(key, mstSet)
           mstSet[u] = True
 
           for v in range(self.V):
               if self.graph[u][v] > 0 and mstSet[v] == False and key[v] > self.graph[u][v]:
                   key[v] = self.graph[u][v]
                   pi[v] = u
 
       self.printMST(pi)
g = Graph(5)
g.graph = [[0, 2, 2, 5, 3],
           [2, 0, 1, 4, 4],
           [2, 1, 0, 3, 5],
           [5, 4, 3, 0, 9],
           [3, 4, 5, 9, 0]]
 
g.prims()
